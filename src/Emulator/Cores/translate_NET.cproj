<Project DefaultTargets="Build">
  <UsingTask AssemblyFile="$(MSBuildProjectDirectory)/../../../../../lib/cctask/CCTask/bin/Release/net6.0/CCTask.dll" TaskName="CCompilerTask" />
  <UsingTask AssemblyFile="$(MSBuildProjectDirectory)/../../../../../lib/cctask/CCTask/bin/Release/net6.0/CCTask.dll" TaskName="CLinkerTask" />

  <Target Name="VerifyProperties">
    <Error Text="The compiler must be explicitly provided when compiling on macOS." Condition="$(CompilerPath) == '' and $(CurrentPlatform) == 'OSX'" />
    <Error Text="No configuration provided" Condition=" $(Configuration) == '' " />
    <Error Text="Host endianess not provided" Condition=" $(HostEndianess) == '' " />
    <Error Text="Wrong host endianess value: provide 'le' or 'be'" Condition=" $(HostEndianess) != 'le' and $(HostEndianess) != 'be' " />
    <Error Text="Target endianess not provided" Condition=" $(TargetEndianess) == '' " />
    <Error Text="Wrong target endianess value: provide 'le' or 'be'" Condition=" $(TargetEndianess) != 'le' and $(TargetEndianess) != 'be' " />
    <Error Text="Target architecture not provided" Condition=" $(TargetArchitecture) == '' " />
    <Error Text="Host architecture not provided!" Condition=" $(HostArchitecture) == '' " />

    <Message Text="Target word size not provided. Using default: 32" Condition=" $(TargetWordSize) == '' " />
    <Message Text="Number of extra insn_start words not provided. Using default: 0" Condition=" $(TargetInsnStartExtraWords) == '' " />
    <Message Text="Emulated target not provided. Using default: $(TargetArchitecture.ToLower())" Condition=" $(EmulatedTarget) == '' " />

    <PropertyGroup>
      <TargetWordSize Condition=" $(TargetWordSize) == '' ">32</TargetWordSize>
      <TargetInsnStartExtraWords Condition=" $(TargetInsnStartExtraWords) == '' ">0</TargetInsnStartExtraWords>

      <ProtoTarget>$(TargetArchitecture.ToLower())</ProtoTarget>
      <HostUpper>$(HostArchitecture.ToUpper())</HostUpper>

      <ConfigName>$(ProtoTarget)-$(TargetWordSize)_$(TargetEndianess)</ConfigName>
      <OutputDirectory>bin/$(Configuration)/$(ConfigName)</OutputDirectory>
      <OutputLibrary>$(OutputDirectory)/translate-$(ProtoTarget)-$(TargetEndianess).so</OutputLibrary>
      <ObjectFilesDirectory>obj/$(Configuration)/obj-$(ConfigName)</ObjectFilesDirectory>
      <TlibDirectory>tlib</TlibDirectory>
      <TcgLibraryDirectory>$(MSBuildProjectDirectory)/tlib/tcg/bin/$(Configuration)</TcgLibraryDirectory>
      <TcgLibraryFilename>libtcg_$(HostArchitecture)-$(TargetWordSize)-$(TargetInsnStartExtraWords)_$(TargetEndianess).a</TcgLibraryFilename>
    </PropertyGroup>

    <Message Text="Configuring translation library" />
    <Message Text="Host : $(HostArchitecture), 64-bit, $(HostEndianess)" />
    <Message Text="Target : $(TargetArchitecture), $(TargetWordSize)-bit, $(TargetEndianess)" />
  </Target>

  <Target Name="GenerateFlags" DependsOnTargets="VerifyProperties">
    <PropertyGroup>
      <EmulatedTargetUpper>$(EmulatedTarget.ToUpper())</EmulatedTargetUpper>
    </PropertyGroup>
    <ItemGroup>
      <CompilationFlags Include="-DTLIB_PROFILING_BUILD=1" Condition="$(TlibProfilingBuild) == 'true'" />
      <CompilationFlags Include="-fno-omit-frame-pointer" Condition="$(TlibProfilingBuild) == 'true'" />
      <CompilationFlags Include="-fomit-frame-pointer" Condition="$(Configuration) == 'Release' and $(TlibProfilingBuild) != 'true'" />

      <CompilationFlags Include="-shared" Condition=" $(CurrentPlatform) != 'OSX' " />
      <CompilationFlags Include="-fPIC" Condition=" $(OS) != 'Windows_NT'" />
      <CompilationFlags Include="-g3" Condition=" $(Configuration) == 'Debug' or $(TlibProfilingBuild) == 'true'" />
      <CompilationFlags Include="-O3" Condition=" $(Configuration) == 'Release'" />
      <!-- Partial Redundancy Elimination with GCC 12+ is breaking correctness of a simple exported tlib function
               (see arch/arm64/arch_exports.c). Let's disable it so that it doesn't break any other code. -->
      <CompilationFlags Include="-fno-tree-pre" Condition=" $(Configuration) == 'Release' and $(CurrentPlatform) != 'OSX'" />
      <CompilationFlags Include="-Wall" />
      <CompilationFlags Include="-Wextra" />
      <CompilationFlags Include="-Wno-unused-parameter" />
      <CompilationFlags Include="-Wno-sign-compare" />
      <!-- Clang warns about "too many arguments in call" whenever a stub (arm64/stubs.h) is called with arguments.
               The stubs hackishly use the fact that a function defined without a "void" argument can be actually called with arguments.
               There's no way to turn off these warnings so for now simply let's not convert warnings to errors on macOS for arm64.

               TODO: Remove the condition when we get rid of the stubs or when stubs are implemented in a different way. -->
      <CompilationFlags Include="-Werror" Condition=" $(CurrentPlatform) != 'OSX' or $(TargetArchitecture) != 'arm64' " />
      <CompilationFlags Include="-DCONFIG_NEED_MMU" />
      <CompilationFlags Include="-DTCG_TARGET_$(HostUpper)" />
      <CompilationFlags Include="-DHOST_BITS_64" />
      <CompilationFlags Include="-I $(TlibDirectory)/arch/$(EmulatedTarget)" />
      <CompilationFlags Include="-I $(TlibDirectory)/tcg/$(HostArchitecture)" />
      <CompilationFlags Include="-I $(TlibDirectory)/include" />
      <CompilationFlags Include="-I $(TlibDirectory)/softfloat-2" />
      <CompilationFlags Include="-I $(TlibDirectory)/softfloat-3/source/include/" />
      <CompilationFlags Include="-I $(TlibDirectory)/tcg" />
      <CompilationFlags Include="-I renode/include" />
      <!-- Common headers for "arm" and "arm64" -->
      <CompilationFlags Include="-I $(TlibDirectory)/arch/arm_common" Condition="$(EmulatedTarget) == 'arm' or $(EmulatedTarget) == 'arm64'" />

      <CompilationFlags Include="-DTARGET_SHORT_ALIGNMENT=2" />
      <CompilationFlags Include="-DTARGET_INT_ALIGNMENT=4" />
      <CompilationFlags Include="-DTARGET_LONG_ALIGNMENT=4" />
      <CompilationFlags Include="-DTARGET_LLONG_ALIGNMENT=4" />

      <CompilationFlags Include="-DHOST_$(HostUpper)=1" />
      <CompilationFlags Include="-DHOST_LONG_BITS=64" />

      <CompilationFlags Include="-DTARGET_ARCH=&quot;$(EmulatedTarget)&quot;" />
      <CompilationFlags Include="-DTARGET_$(EmulatedTargetUpper)=1" />
      <CompilationFlags Include="-DCONFIG_$(HostUpper)_DIS=1" />
      <CompilationFlags Include="-DCONFIG_$(EmulatedTargetUpper)_DIS=1" />
      <CompilationFlags Include="-DTARGET_WORDS_BIGENDIAN=1" Condition=" $(TargetEndianess) == 'be' " />
      <CompilationFlags Include="-DTARGET_LONG_BITS=$(TargetWordSize)" />
      <CompilationFlags Include="-DTARGET_INSN_START_EXTRA_WORDS=$(TargetInsnStartExtraWords)" />

      <CompilationFlags Include="-DDEBUG=1" Condition=" $(Configuration) == 'Debug'" />

      <CompilationFlags Include="$(AdditionalCompilationFlags)" />

      <!-- This define is a little hack: It is necessary for CLinkerTask to create separate entry in hashes cache -->
      <LinkFlags Include="-DFAKE_$(EmulatedTargetUpper)_$(TargetEndianess)_$(TargetWordSize)_$(TargetInsnStartExtraWords)" />
      <LinkFlags Include="-Wl,--wrap=memcpy" Condition=" $(CurrentPlatform) == 'Linux' " />
      <!-- On Windows: link MinGW's pthread library statically -->
      <LinkFlags Include="-static -lwinpthread -dynamic" Condition="$(OS) == 'Windows_NT'" />
      <LinkFlags Include="-lpthread" Condition="$(OS) != 'Windows_NT'" />
      <LinkFlags Include="$(MSBuildProjectDirectory)/../../../../../lib/resources/libraries/libopenlibm-Linux.a" Condition="$(TargetArchitecture) == 'i386' and $(CurrentPlatform) == 'Linux'" />
      <LinkFlags Include="-shared" />
      <LinkFlags Include="-z defs" Condition="$(CurrentPlatform) == 'Linux'" />
      <LinkFlags Include="-Wl,-undefined,error" Condition="$(CurrentPlatform) != 'Linux'" />
      <LinkFlags Include="$(AdditionalLinkFlags)" />
    </ItemGroup>
  </Target>

  <Target Name="PrepareCompilation" DependsOnTargets="GenerateFlags">
    <ItemGroup>
      <SourceFiles Include="$(TlibDirectory)/*.c" />
      <SourceFiles Include="$(TlibDirectory)/arch/*.c" />
      <SourceFiles Include="$(TlibDirectory)/external/*.c" />
      <SourceFiles Include="$(TlibDirectory)/softfloat-2/*.c" />
      <SourceFiles Include="$(TlibDirectory)/arch/$(EmulatedTarget)/*.c" />
      <SourceFiles Include="renode/*.c" />
      <SourceFiles Include="renode/arch/$(EmulatedTarget)/*.c" />

      <!-- Common code for "arm" and "arm64" -->
      <SourceFiles Include="$(TlibDirectory)/arch/arm_common/*.c" Condition="$(EmulatedTarget) == 'arm' or $(EmulatedTarget) == 'arm64'" />
    </ItemGroup>
    <ItemGroup>
      <InputFiles Include="**" Exclude="config/**;tcg/**;softfloat-3/**;bin/**;obj/**;lib/**;**/.*" />
      <ObjectFiles Include="@(SourceFiles->'$(ObjectFilesDirectory)/%(relativedir)%(filename).o')" />
    </ItemGroup>
  </Target>

  <Target Name="Compile" DependsOnTargets="PrepareCompilation" Inputs="@(InputFiles)" Outputs="@(ObjectFiles)">
    <CCompilerTask CompilerPath="$(CompilerPath)" Parallel="true" Sources="@(SourceFiles)" Flags="@(CompilationFlags)" ObjectFilesDirectory="$(ObjectFilesDirectory)" />
  </Target>

  <Target Name="PrepareDependencies" DependsOnTargets="VerifyProperties">
    <PropertyGroup>
      <SoftFloatSpecializedArchitecture>8086</SoftFloatSpecializedArchitecture>
      <SoftFloatSpecializedArchitecture Condition="$(EmulatedTarget) == 'riscv' or $(EmulatedTarget) == 'riscv64'">RISCV</SoftFloatSpecializedArchitecture>
    </PropertyGroup>
    <ItemGroup>
      <ProjectDependencies Include="tcg_NET.cproj">
        <AdditionalProperties>TargetWordSize=$(TargetWordSize);TargetInsnStartExtraWords=$(TargetInsnStartExtraWords);Endianess=$(TargetEndianess)</AdditionalProperties>
      </ProjectDependencies>
      <ProjectDependencies Include="softfloat-3_NET.cproj">
        <AdditionalProperties>SpecializedArchitecture=$(SoftFloatSpecializedArchitecture)</AdditionalProperties>
      </ProjectDependencies>
    </ItemGroup>
  </Target>

  <Target Name="BuildDependencies" DependsOnTargets="PrepareDependencies">
    <MSBuild Projects="@(ProjectDependencies)" Properties="Configuration=$(Configuration);BuildDirectory=$(ObjectFilesDirectory);CompilerPath=$(CompilerPath);">
      <Output TaskParameter="TargetOutputs" ItemName="LibraryDependencies" />
    </MSBuild>
  </Target>

  <Target Name="PrepareBuild" DependsOnTargets="BuildDependencies">
    <ItemGroup>
      <ObjectFiles Include="@(LibraryDependencies)" />
    </ItemGroup>
  </Target>

  <Target Name="Build" DependsOnTargets="Compile;PrepareBuild" Inputs="@(ObjectFiles)" Outputs="$(OutputLibrary)">
    <MakeDir Directories="$(OutputDirectory)" />
    <CLinkerTask LinkerPath="$(LinkerPath)" ObjectFiles="@(ObjectFiles)" Flags="@(LinkFlags)" Output="$(OutputLibrary)" />
  </Target>

  <Target Name="Clean">
    <RemoveDir Directories="config;obj;bin" />
  </Target>
</Project>
